#!/bin/bash
#
# Quick and dirty IPlinux cross-toolchain builder
#

set -o pipefail
if [ -n "$MKTPKG_DEBUG" ]; then
    set -x
fi
set -e

usage() {
    echo -e "Usage: $0 [-jN] [-d] <target-arch> [action [action]... ]"
    echo
    echo -e "\t-jN               Number of jobs allowed to be run simultaneously (BEWARE OF THE BROKEN PACKAGES!!!11)"
    echo -e "\t-d                Show the build output"
    echo
    echo -e "\t<target-arch>     a Debian architecture string."
    echo
}

# Distro #

DISTRO=zelazny

# Paths to sources #

SRC_DIR=$(pwd)
BINUTILS_DIR=$SRC_DIR/binutils-host
LLD_DIR=$SRC_DIR/linux-libc-dev
UCLIBC_DIR=$SRC_DIR/uclibc
GLIBC_DIR=$SRC_DIR/glibc
GCC_DIR=$SRC_DIR/gcc-4.3
TPKG_DIR=$SRC_DIR/toolchain-package

MYARCH=$(dpkg --print-architecture)

ROOTCMD=sudo

do_clean() {
    rm -f $SRC_DIR/*.dsc $SRC_DIR/*.tar.gz $SRC_DIR/*.log $SRC_DIR/log-* $SRC_DIR/*.changes
    rm -f $SRC_DIR/*_${TARGET}.deb $SRC_DIR/*-${TARGET}-cross_*_all.deb ${SRC_DIR}/*-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb
}

do_prepare() {
    # Fetch the sources here.
    echo "Prepare.. "
}

_cross() {
    echo "Crossing $@ for $TARGET"

    ( cd $SRC_DIR ; dpkg-cross -A -a $TARGET -b "$@" )
}


do_binutils() {
    cd $BINUTILS_DIR
    ./debian/source/prepare $TARGET
    # Does not work with $PARALLEL
    dpkg-buildpackage -us -uc -b
}

do_binutils_install() {
    $ROOTCMD dpkg -i binutils-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb
}


do_lld() {
    ( cd $LLD_DIR
    dpkg-buildpackage -uc -us -b -a${TARGET} ${PARALLEL} )
    _cross linux-libc-dev_*_${TARGET}.deb
}

do_lld_install() {
    $ROOTCMD dpkg -i linux-libc-dev-${TARGET}-cross_*_all.deb
}

do_bs1_glibc() {
    ( cd $GLIBC_DIR
    debian/source/prepare dev-headers
    dpkg-buildpackage -uc -us -b -a${TARGET} ${PARALLEL})

    _cross libc6-dev-headers_*_${TARGET}.deb
}

do_bs1_glibc_install() {
    $ROOTCMD dpkg -i libc6-dev-headers-${TARGET}-cross_*_all.deb
}

do_bs1_glibc_remove() {
    $ROOTCMD dpkg -r libc6-dev-headers-${TARGET}-cross
}

do_bs2_glibc() {
    ( cd $GLIBC_DIR
    debian/source/prepare bootstrap
    dpkg-buildpackage -uc -us -b -a${TARGET} ${PARALLEL} )

    _cross libc6-dev_*_${TARGET}.deb
    _cross libc6_*_${TARGET}.deb
}

do_bs2_glibc_install() {
    $ROOTCMD dpkg -i libc6-dev-${TARGET}-cross_*_all.deb libc6-${TARGET}-cross_*_all.deb
}

do_glibc() {
    ( cd $GLIBC_DIR
    debian/source/prepare final
    dpkg-buildpackage -uc -us -b -a${TARGET} ${PARALLEL})

    _cross gconv-data-basic_*_${TARGET}.deb
    _cross gconv-data-ebcdic_*_${TARGET}.deb
    _cross gconv-data-oriental_*_${TARGET}.deb
    _cross libc6-dbg_*_${TARGET}.deb
    _cross libc6-dev_*_${TARGET}.deb
    _cross libc6-iconv_*_${TARGET}.deb
    _cross libc6-rpc_*_${TARGET}.deb
    _cross libc6-tz_*_${TARGET}.deb
    _cross libc6-utils_*_${TARGET}.deb
    _cross libc6_*_${TARGET}.deb
    _cross locales_*_all.deb
}

do_glibc_install() {
    $ROOTCMD dpkg -i gconv-data-basic-${TARGET}-cross_*_all.deb \
            gconv-data-ebcdic-${TARGET}-cross_*_all.deb \
            gconv-data-oriental-${TARGET}-cross_*_all.deb \
            libc6-dbg-${TARGET}-cross_*_all.deb \
            libc6-dev-${TARGET}-cross_*_all.deb \
            libc6-iconv-${TARGET}-cross_*_all.deb \
            libc6-rpc-${TARGET}-cross_*_all.deb \
            libc6-tz-${TARGET}-cross_*_all.deb \
            libc6-utils-${TARGET}-cross_*_all.deb \
            libc6-${TARGET}-cross_*_all.deb \
            locales-${TARGET}-cross_*_all.deb
}


do_bs1_gcc() {
    ( cd $GCC_DIR
    debian/source/prepare $TARGET bootstrap
    dpkg-buildpackage -us -uc -b $PARALLEL )

    _cross libgcc1_*_${TARGET}.deb
}

do_bs1_gcc_install() {
    $ROOTCMD dpkg -i cpp-4.3-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb \
            gcc-4.3-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb \
            libgcc1-${TARGET}-cross_*_all.deb
}

do_gcc() {
    ( cd $GCC_DIR
    debian/source/prepare $TARGET final
    dpkg-buildpackage -us -uc -b $PARALLEL )
    _cross libstdc++6_*_${TARGET}.deb
    _cross libgcc1_*_${TARGET}.deb
    _cross libstdc++6-4.3-dev_*_${TARGET}.deb
}

do_gcc_install() {
    $ROOTCMD dpkg -i cpp-4.3-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb \
            g++-4.3-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb \
            gcc-4.3-${PKG_HOST_GNU_TARGET}_*_${MYARCH}.deb \
            libgcc1-${TARGET}-cross_*_all.deb \
            libstdc++6-4.3-dev-${TARGET}-cross_*_all.deb \
            libstdc++6-${TARGET}-cross_*_all.deb

}

do_tpkg() {
    cd $TPKG_DIR
    debian/source/prepare $TARGET 4.3
    dpkg-buildpackage -us -uc -b
}

do_tpkg_install() {
    $ROOTCMD dpkg -i ${TARGET}-cross-toolchain_*_all.deb
}
run_action () {
    echo "Running '$1'..."
    if [ -z "$DEBUG" ] ; then
        ( $1 ) > $LOG_BASE-$1.log 2>&1
    else
        ( $1 ) 2>&1 | tee $LOG_BASE-$1.log
    fi
    if [ $? -ne 0 ] ; then
        echo "Action '$1' failed, see logs in '$LOG_BASE-$1.log'"
        exit 1
    fi
}

#
# Script starts here
#

while true; do
    case "$1" in
        -j*)
            PARALLEL=$1
            shift;;
        -d)
            DEBUG=$1
            shift;;
        --)
            shift
            break;;
        -*)
            echo "Unexpected option: $1"
            exit 1;;
        *)
            break;;
    esac
done

if [ $# -lt 1 ] ; then
    usage
    exit 1
fi

TARGET=$1
shift

HOST_GNU_TYPE=$(dpkg-architecture -a$TARGET -qDEB_HOST_GNU_TYPE)
HOST_GNU_SYSTEM=$(dpkg-architecture -a$TARGET -qDEB_HOST_GNU_SYSTEM)
BUILD_GNU_TYPE=$(dpkg-architecture -a$TARGET -qDEB_BUILD_GNU_TYPE)

PKG_HOST_GNU_TARGET=`echo ${HOST_GNU_TYPE} | sed -e 's/_/-/g'`


if [ "x${HOST_GNU_TYPE}" = "x${BUILD_GNU_TYPE}" ] ; then
    echo "Host system type same as target: ${HOST_GNU_TYPE}"
    echo "This should never happen. Ure are probably using wrong dpkg."
    exit 1
fi

if [ $# -ne 0 ] ; then
    ACTIONS=$@
else
    case "$HOST_GNU_SYSTEM" in
        *uclibc*)
            echo "uClibc support is coming soon!"
            ;;
        *gnu*)
            ACTIONS="do_clean do_prepare do_binutils do_binutils_install \
                     do_lld do_lld_install do_bs1_glibc do_bs1_glibc_install \
                     do_bs1_gcc do_bs1_gcc_install do_bs1_glibc_remove \
                     do_bs2_glibc do_bs2_glibc_install do_gcc do_gcc_install \
                     do_glibc do_glibc_install"
            ;;
        *)
            echo "Unknown libc requested: $HOST_GNU_SYSTEM"
            exit 1
            ;;
    esac

fi


# banner
echo "Building cross toolchain packages"
echo "---------------------------------"
echo "Host architecture: $MYARCH"
echo "Target architecture: $TARGET"
echo "Actions: $ACTIONS"

LOG_BASE=log

for action in $ACTIONS ; do
    run_action $action
done
